<?php

/* To create the table in database : CREATE TABLE IF NOT EXISTS {PREFIX}tokenAPI ( `ID` int(11) NOT NULL AUTO_INCREMENT, `ip` int(11) NULL DEFAULT NULL, `token` varchar(254) NOT NULL, `DateTime` datetime  NOT NULL, `url` varchar(255) NOT NULL, `page` varchar(255) NOT NULL, `usee` enum('0','1') NOT NULL DEFAULT '0', `associatedDatas` text, PRIMARY KEY (`ID`)) ENGINE=MyISAM DEFAULT CHARSET=latin1 AUTO_INCREMENT=1 */


if( session_status() != 2 && !headers_sent() ) {
    session_start();
}
elseif( headers_sent() ) {
    throw new TokenAPIException('Please, create a session before send headers.', tokenAPI::EXCEPTION_CREATE_SESSION);
}

/**
 * Manages tokens
 * Code skeleton generated by dia-uml2php5 plugin written by KDO kdo@zpmag.com
 * Written by Ajabep

 * @version : 1.2
 * @ClassInfos(author => 'Ajabep', version => '1.2')
 */
class tokenAPI{

    /**
     * Stock the uniq var on the __construct
     * @var bool
     * @access protected

     * @AttrInfos(description => 'Stock the uniq var on the __construct', type => 'bool', access => 'protected')
     */
    protected $uniq = true;

    /**
     * returned associated datas
     * @var mixed
     * @access protected

     * @AttrInfos(description => 'returned associated datas', type => 'mixed', access => 'protected')
     */
    protected $associatedDatas = null;

    /**
     * authorizes the IP stokage
     * @var bool
     * @access protected

     * @AttrInfos(description => 'authorizes the IP stokage', type => 'bool', access => 'protected')
     */
    protected $canStockIP = true;

    /**
     * prefix of the table
     * @var string
     * @access protected

     * @AttrInfos(description => 'prefix of the table', type => 'string', access => 'protected')
     */
    protected $prefixDb = '';

    /**
     * In second. Minimum time limit to check the token. Min : 5, recomended : 30
     * @var int
     * @access protected

     * @AttrInfos(description => 'In second. Minimum time limit to check the token. Min : 5, recomended : 30', type => 'int', access => 'protected')
     */
    protected $timeLimitMin = 30;

    /**
     * In second. Maximum time limit to check the token.
     * @var int
     * @access protected

     * @AttrInfos(description => 'In second. Maximum time limit to check the token.', type => 'int', access => 'protected')
     */
    protected $timeLimitMax = '50M0';

    /**
     * The size of the token. Min : 30, max : 254, recomended : 254. Give a even value only.
     * @var int
     * @access protected

     * @AttrInfos(description => 'The size of the token. Min : 30, max : 254, recomended : 254. Give a even value only.', type => 'int', access => 'protected')
     */
    protected $numberCharsToken = 254; 


    /* Now, Dont touch ;) ! */


    /**
     * database connection in PDO
     * @var void
     * @access protected

     * @AttrInfos(description => 'database connection in PDO', type => 'void', access => 'protected')
     */
    protected $db;

    /**
     * string to return if the object is convert to string
     * @var mixed
     * @access protected

     * @AttrInfos(description => 'string to return if the object is convert to string', type => 'mixed', access => 'protected')
     */
    protected $return = 'ERROR TOKEN API : You haven\'t execute method before';

    const TOKEN_VALID = 1;
    const EXCEPTION_CREATE_SESSION = 2;
    const EXCEPTION_BAD_CONNECTION = 3;
    const EXCEPTION_PDO_ERROR = 4;
    const EXCEPTION_CREATE_TABLE = 5;
    const EXCEPTION_SERIALISE = 6;
    const EXCEPTION_UNSERIALISE = 7;
    const ERR_TOKEN_INVALID = 8;
    const ERR_TIME_LIMIT_PASSED = 9;
    const ERR_TO_EARLY = 10;
    const ERR_TRY_LATER = 11;
    const ERR_ALREADY_USED = 12;

    const WITHOUT_MIN_TIME = 0x1;
    const WITHOUT_MAX_TIME = 0x2;
    const WITHOUT_TIME = 0x3; // WITHOUT_MIN_TIME | WITHOUT_MAX_TIME
    const WITH_TIME = 0x4;


    /**
     * @access public
     * @param mixed $db Can be a PDO instance and an array. If it's an array, it must have the following key :
        -DSN : the DSN of your database (ex : mysql)
        -database : the name of your database

        the array can have these optional keys :
        -host : the host of your database (default : localhost)
        -port : the port of your database
        -user : the user's name to connect to the database (default : root)
        -password : the user's password to connect to the database (default : '')
     * @param bool $uniq If it's the onlytoken on this page
     * @return void

     * @ParamInfos(name => 'db', description => 'Can be a PDO instance and an array. If it's an array, it must have the following key :
        -DSN : the DSN of your database (ex : mysql)
        -database : the name of your database

        the array can have these optional keys :
        -host : the host of your database (default : localhost)
        -port : the port of your database
        -user : the user's name to connect to the database (default : root)
        -password : the user's password to connect to the database (default : "")', type => 'mixed')
     
     * @ParamInfos(name => 'uniq', description => 'If it's the onlytoken on this page', type => 'bool')
     * @MethodInfos(description => 'crÃ©er l'objet', return => void, returnDescrition => 'returns nothing', type => 'void', access => 'public')
     */
    public function __construct($db, $uniq = true) {
        $this->uniq = (bool) $uniq;
		
        if( $db instanceof PDO )
            $this->db = $db;
        elseif( is_array($db) ) {
            try {
                $port = '';
                if( isset($db['port']) )
                    $port = ';port=' . $db['port'];
                
                if( !isset($db['host']) )
                    $db['host'] = 'localhost';
                
                if( !isset($db['user']) )
                    $db['user'] = 'root';
                
                if( !isset($db['password']) )
                    $db['password'] = '';
                
                $this->db = new PDO( $db['DSN'] . ':host=' . $db['host'] . $port . ';dbname=' . $db['database'], $db['user'], $db['password'] );
            }
            catch(PDOException $e) {
                throw new TokenAPIException('Please, change your database\'s id.', self::EXCEPTION_BAD_CONNECTION);
            }
        }
		
        $this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_SILENT);
        $db = $this->db;
        $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        $query = $db->prepare('DELETE FROM ' . $this->prefixDb . 'tokenAPI WHERE DateTime < ( NOW() - ' . ( ((int) $this->timeLimitMax) + 3600 * ( 12 * 24 ) ) . ') 
        OR usee = \'1\'
        ; OPTIMIZE TABLE ' . $this->prefixDb . 'tokenAPI');
		
        try {
            $result = $query->execute();
        }
        catch( PDOException $e ) {
            if( $e->getCode() == '42S02' )
                $result = false;
            else
                throw new TokenAPIException('I have cath a PDOExeption "' . $e . '".', self::EXCEPTION_PDO_ERROR);
        }
		
        if(!$result) {
            $query = $db->prepare('CREATE TABLE IF NOT EXISTS ' . $this->prefixDb . 'tokenAPI ( `ID` int(11) NOT NULL AUTO_INCREMENT, `ip` int(11) NULL DEFAULT NULL, `token` varchar(254) NOT NULL, `DateTime` datetime NOT NULL, `url` varchar(255) NOT NULL, `page` varchar(255) NOT NULL, `usee` enum(\'0\',\'1\') NOT NULL DEFAULT \'0\', `associatedDatas` text, PRIMARY KEY (`ID`)) ENGINE=MyISAM DEFAULT CHARSET=latin1 AUTO_INCREMENT=1');
            try {
                $result = $query->execute();
            }
            catch( PDOException $e ) {
                if( $e->getCode() == '42S02' )
                    $result = false;
                else
                    throw new TokenAPIException( 'I have cath a PDOExeption "' . $e . '".', self::EXCEPTION_PDO_ERROR);
            }
			
            if(!$result)
                throw new TokenAPIException('Please, create the table.', self::EXCEPTION_CREATE_TABLE);
        }
        $this->numberCharsToken = round( $this->numberCharsToken / 2 ) * 2;
    }

    /**
     * Create a token
     * @access public
     * @param string $page Unique identifier of the page of generating
     * @param bool $blockURI Block the URI recording
     * @param mixed $canStockIP If you can stock the IP (some jurisdictions forbi to stock IP)
			if it's null, it's the canStockIP property which is use
			if it's true, it's will authorize the storage of the IP
			if it's false, it's will forbid the storage of the IP
     * @param mixed $numberCharsToken The number of char of the token
			if it's null, it's the numberCharsToken property which is use
			if it's a number, it's will define the number of char to build the token
     * @param mixed $associatedDatas It's the optionnals associated datas with the token
     * @return mixed

     * @ParamInfos(name => 'page', description => 'unique identifier of the page of generating', type => 'string')
     * @ParamInfos(name => 'blockURI', description => 'block the URI recording', type => 'bool')
     * @ParamInfos(name => 'canStockIP', description => 'If you can stock the IP (some jurisdictions forbi to stock IP)
			if it's null, it's the canStockIP property which is use
			if it's true, it's will authorize the storage of the IP
			if it's false, it's will forbid the storage of the IP', type => 'mixed')
     * @ParamInfos(name => 'numberCharsToken', description => 'The number of char of the token
			if it's null, it's the numberCharsToken property which is use
			if it's a number, it's will define the number of char to build the token', type => 'mixed')
     * @ParamInfos(name => 'associatedDatas', description => 'It's the optionnals associated datas with the token', type => 'mixed')
     * @MethodInfos(description => 'Create a token', return => mixed, returnDescrition => 'return the token or an error constant', access => 'public')
     */
    public function create($page = '', $blockURI = false, $canStockIP = null, $numberCharsToken = null, $associatedDatas = null) {
		
        if( is_null($canStockIP) )
            $canStockIP = (bool) $this->canStockIP;
		
        if( is_null($numberCharsToken) )
            $numberCharsToken = max(30, min(254, (int) $this->numberCharsToken ) );
        
        $ipToDb = '';
        $ipAliasToDb = '';
		
        if( $canStockIP ) {
            $ipToDb = 'ip,';
            $ipAliasToDb = 'ip,:';
        }
        
        if( function_exists('openssl_random_pseudo_bytes') )
            $token = bin2hex( openssl_random_pseudo_bytes($numberCharsToken / 2) );
        else {
            $token = '';
            while( strlen($token) < $numberCharsToken ) {
                if( function_exists('uniqid') )
                    $token .= uniqid('', true);
                else
                    $token .= mt_rand();
            }
            $token = substr($token, 0, $numberCharsToken);
        }
		
        if( isset($_SERVER['REQUEST_URI']) && strpos($_SERVER['REQUEST_URI'], 'http://') !== false ) {
            $urlParsed = parse_url( $_SERVER['REQUEST_URI'] );
            $uri = $urlParsed['path'];
            
            if( isset($urlParsed['query']) )
                $uri .= '?' . $urlParsed['query'];
			
            if( isset($urlParsed['fragment']) )
                $uri .= '#' . $urlParsed['fragment'];
			
            $_SERVER['REQUEST_URI'] = $uri;
        }
		
        $URIToDb = '';
        $URIAliasToDb = '';
        
		if( !(bool) $blockURI ) {
            $URIToDb = ',url';
            $URIAliasToDb = ',:url';
        }
        
		if( is_null($associatedDatas) )
            $insertValue = 'NULL';
        else
            $insertValue = ':associatedDatas';
        
		$query = $this->db->prepare('INSERT INTO ' . $this->prefixDb . 'tokenAPI (ID,' . $ipToDb . 'token,DateTime' . $URIToDb . ',page, associatedDatas) VALUES (NULL,:' . $ipAliasToDb . 'token,NOW()' . $URIAliasToDb . ',:page,' . $insertValue . ')');
        
		if( $canStockIP )
            $query->bindValue(':ip', ip2long($_SERVER['REMOTE_ADDR']), PDO::PARAM_INT);
        
		$query->bindValue(':token', $token, PDO::PARAM_STR);
        
		if( !(bool) $blockURI )
            $query->bindValue(':url', $_SERVER['REQUEST_URI'], PDO::PARAM_STR);
        
		$query->bindValue(':page', $page, PDO::PARAM_STR);
        
		if( !is_null($associatedDatas) )
            $query->bindValue(':associatedDatas', serialize($associatedDatas), PDO::PARAM_STR);
        
		if( !$this->uniq )
            $_SESSION['token-' . $page] = $token;
        else
            $_SESSION['token'] = $token;
        
        try {
            $result = $query->execute();
        }
        catch(PDOException $e) {
            throw new TokenAPIException('I have cath a PDOExeption "' . $e . '".', self::EXCEPTION_PDO_ERROR);
        }
        
		if( !$result )
            return self::ERR_TRY_LATER;
        else {
            $this->return = $token;
            return $token;
        }
    }

    /**
     * Verify a token
     * @access public
     * @param string $token The token to check
     * @param string $page Unique identifier of the page of generating
     * @param int $timeTest Time to test (minimal, maximum, both)
     * @param bool $delete If you want delete the token
     * @param mixed $timeMin The minimal time when you test the minimal time
			if it's an int, it the minimal accepted time in seconds
			if it's false, it's the timeLimitMin property which is use
     * @param mixed $timeMax The maximum time when you test the minimal time
			if it's an int, it the maximum accepted time in seconds
			if it's false, it's the timeLimitMax property which is use
     * @param mixed $canStockIP If you want to check the IP (some jurisdictions forbi to stock IP)
			if it's null, it's the canStockIP property which is use
			if it's true, it's will authorize the check of the IP
			if it's false, it's will forbid the check of the IP
     * @param mixed $numberCharsToken The number of char of the token
			if it's null, it's the numberCharsToken property which is use
			if it's a number, it's will define the number of char to build the token
     * @param bool $refer If you want to check the referer
     * @return int

     * @ParamInfos(name => 'token', description => 'the token to check', type => 'string')
     * @ParamInfos(name => 'page', description => 'unique identifier of the page of generating', type => 'string')
     * @ParamInfos(name => 'timeTest', description => 'Time to test (minimal, maximum, both)', type => 'int')
     * @ParamInfos(name => 'delete', description => 'If you want delete the token', type => 'bool')
     * @ParamInfos(name => 'timeMin', description => 'The minimal time when you test the minimal time
			if it's an int, it the minimal accepted time in seconds
			if it's false, it's the timeLimitMin property which is use', type => 'mixed')
     * @ParamInfos(name => 'timeMax', description => 'The maximum time when you test the minimal time
			if it's an int, it the maximum accepted time in seconds
			if it's false, it's the timeLimitMax property which is use', type => 'mixed')
     * @ParamInfos(name => 'canStockIP', description => 'If you want to check the IP (some jurisdictions forbi to stock IP)
			if it's null, it's the canStockIP property which is use
			if it's true, it's will authorize the check of the IP
			if it's false, it's will forbid the check of the IP', type => 'mixed')
     * @ParamInfos(name => 'numberCharsToken', description => 'The number of char of the token
			if it's null, it's the numberCharsToken property which is use
			if it's a number, it's will define the number of char to build the token', type => 'mixed')
     * @ParamInfos(name => 'refer', description => 'If you want to check the referer', type => 'bool')
     * @MethodInfos(description => 'Verify a token', return => int, returnDescrition => 'return an constant', access => 'public')
     */
    public function verify($token, $page = '', $timeTest = self::WITH_TIME, $delete = true, $timeMin = false, $timeMax = false, $canStockIP = null, $numberCharsToken = null, $refer = true) {
        if( false == $timeMin )
            $timeMin = max(5, $this->timeLimitMin);
        
		if( false == $timeMax )
            $timeMax = $this->timeLimitMax;
        
		if( is_null($canStockIP) )
            $canStockIP = (bool) $this->canStockIP;
        
		if( is_null($numberCharsToken) )
            $numberCharsToken = max(30, min(254, (int) $this->numberCharsToken) );
        
        $urlToDb = '';
        
		if( $refer && isset($_SERVER['HTTP_REFERER']) )
            $urlToDb = '(url=:url OR url=\'\') AND ';
		
        $ipToDb = '';
        
		if( $canStockIP )
            $ipToDb = 'ip=:ip AND ';
        
        $name = 'token';
        
        if( !$this->uniq )
            $name .= '-' . $page;
        
        if( !is_string($token) || isset($_SESSION[$name]) && $_SESSION[$name] != $token || strlen($token) != $numberCharsToken ) {
            $this->return = self::ERR_TOKEN_INVALID;
            return self::ERR_TOKEN_INVALID;
        }
		
        $query = $this->db->prepare('SELECT *, NOW() now FROM ' . $this->prefixDb . 'tokenAPI WHERE ' . $ipToDb . $urlToDb . 'token=:token AND page=:page');
        
		if( $canStockIP )
            $query->bindValue(':ip', ip2long($_SERVER['REMOTE_ADDR']), PDO::PARAM_INT);
		
        if( $refer && isset($_SERVER['HTTP_REFERER']) && strpos($_SERVER['HTTP_REFERER'], 'http://') !== false ) {
            $urlParsed = parse_url($_SERVER['HTTP_REFERER']);
            $pageBeforeURI = $urlParsed['path'];
            
            if( isset($urlParsed['query']) )
                $pageBeforeURI .= '?' . $urlParsed['query'];
            
            if( isset($urlParsed['fragment']) )
                $pageBeforeURI .= '#' . $urlParsed['fragment'];
            
            $query->bindValue(':url', $pageBeforeURI, PDO::PARAM_STR);
        }
		
        $query->bindValue(':token', $token, PDO::PARAM_STR);
        $query->bindValue(':page', $page, PDO::PARAM_STR);
        
		try {
            $query->execute();
        }
        catch(PDOException $e) {
            throw new TokenAPIException('I have cath a PDOExeption "' . $e . '".', self::EXCEPTION_PDO_ERROR);
        }
        
        if( is_array($data = $query->fetch()) ) {
            if( $data['usee'] == 0 ) {
                if( !($timeTest & self::WITHOUT_MAX_TIME) ) {
                    $dateTime = new DateTime($data['DateTime']);
                    $dateTimeNow = new DateTime($data['now']);//To have the database time
                    $interval = new DateInterval('PT' . $timeMax . 'S');
                    $dateTimeNow->sub($interval);
                    $timeTestResult = false;
                    if( $dateTime > $dateTimeNow )
                        $timeTestResult = true;
                    
                }
                else
                    $timeTestResult = true;
                
                if( $timeTestResult ) {
                    if( !($timeTest & self::WITHOUT_MIN_TIME) ) {
                        $dateTime = new DateTime($data['DateTime']);
                        $dateTimeNow = new DateTime($data['now']);//To have the database time
                        $interval = new DateInterval('PT'.$timeMin.'S');
                        $dateTimeNow->sub($interval);
                        if( $dateTime >= $dateTimeNow )
                            $timeTestResult = false;
                        
                    }
					
                    if( $timeTestResult ) {
                        if( $delete ) {
                            $query = $this->db->prepare('UPDATE ' . $this->prefixDb . 'tokenAPI SET usee=\'1\' WHERE ID=:ID');
                            $query->bindValue(':ID', $data['ID'], PDO::PARAM_INT);
                            
							try{
                                $query->execute();
                            }
                            catch(PDOException $e){
                                throw new TokenAPIException('I have cath a PDOExeption "'.$e.'".', self::EXCEPTION_PDO_ERROR);
                            }
                            unset($_SESSION[$name]);
                        }
                        
                        if( @$associatedDatas = unserialize($data['associatedDatas']) )
                            $this->associatedDatas=$associatedDatas;
                        
                        $this->return = self::TOKEN_VALID;
                        return self::TOKEN_VALID;
                    }
                    $this->return = self::ERR_TO_EARLY;
                    return self::ERR_TO_EARLY;
                }
                $this->return = self::ERR_TIME_LIMIT_PASSED;
                return self::ERR_TIME_LIMIT_PASSED;
            }
            else {
                $this->return = self::ERR_ALREADY_USED;
                return self::ERR_ALREADY_USED;
            }
        }
        
        $this->return = self::ERR_TOKEN_INVALID;
        return self::ERR_TOKEN_INVALID;
    }

    /**
     * returns the result of the latest action
     * @access public
     * @return string

     * @MethodInfos(description => 'returns the result of the latest action', return => 'string', returnDescrition => 'returns the result of the latest action', access => 'public')
     */
    public function __toString() {
        return (string) $this->return;
    }

    /**
     * returns the associatedDatas property
     * @access public
     * @return mixed

     * @MethodInfos(description => 'returns the associatedDatas property', return => 'mixed', returnDescrition => 'returns the latest', access => 'public')
     */
    public function associatedDatas() {
        return $this->associatedDatas;
    }



    /* Magics functions */


    /**
     * convert the object to serialize it
     * @access public
     * @return void

     * @MethodInfos(description => 'convert the object to serialize it', return => void, returnDescrition => 'return nothing', access => 'public')
     */
    public function __sleep() {
        throw new TokenAPIException('DON\'T SERIALIZE THIS OBJECT !!!!!!', self::EXCEPTION_SERIALISE);
    }
    /**
     * call when you unserialize this object
     * @access public
     * @return void

     * @MethodInfos(description => 'call when you unserialize this object', return => void, returnDescrition => 'return nothing', access => 'public')
     */
    public function __wakeup() {
        throw new TokenAPIException('DON\'T UNSERIALIZE THIS OBJECT !!!!!!', self::EXCEPTION_UNSERIALISE);
    }
}


/**
 * Manages exeptions class tokenAPI
 * Code skeleton generated by dia-uml2php5 plugin written by KDO kdo@zpmag.com
 * written by Ajabep

 * @version:1.0
 * @ClassInfos(author => 'Ajabep', version => '1.0')
 */
class tokenAPIException extends Exception {


    /**
     * building the object
     * @access public
     * @param string $message error message
     * @param int $code error code
     * @return void

     * @ParamInfos(name => 'message', description => 'error message', type => 'string')
     * @ParamInfos(code => 'message', description => 'error code', type => 'int')
     * @MethodInfos(description => 'building the object', return => void, returnDescrition => 'return nothing', access => 'public')
     */
    public function __construct($message, $code = 0) {
        parent::__construct((string) $message, (int) $code);
    }


    /**
     * returns the description of the error
     * @access public
     * @return string

     * @MethodInfos(description => 'returns the description of the error', return => 'string', returnDescrition => 'returns the description of the error', access => 'public')
     */
    public function __toString() {
        return 'TokenAPIException [ERR ' . $this->code . '] : ' . $this->message . "\n";
    }
}